#summary Arduino Tone Generator Library.

=Arduino Tone Library=

----

<wiki:toc max_depth="2" />

----

==Download==

* [http://rogue-code.googlecode.com/files/Arduino-Library-Tone.zip Tone Library - Latest Version]

==Installation==

See: InstallingArduinoLibraries

==Description==

An Arduino Library to produce square-wave tones.

It uses the hardware timers on the microcontroller to generate square-wave tones in the audible range.

You can output the tones on any pin (arbitrary).  The number of tones that can be played simultaneously depends on the number of hardware timers (with CTC capability) available on the microcontroller.

 * ATmega8: 2
 * ATmega168/328: 3
 * ATmega1280: 6

A simplified version of the Tone library has been incorporated into the Arduino core since 0018.  It only provides a single tone (since only one timer is used).  You can find the core documentation [http://arduino.cc/en/Reference/Tone here].

Check out the great [http://itp.nyu.edu/physcomp/Labs/ToneOutput tutorial] by Tom Igoe at NYU's Interactive Telecommunications Program (ITP).

*Notes:*

  * Just connect the digital pin to a speaker (with a resistor - say 1K - in line), and the other side of the speaker to ground (GND).

[http://arduino.cc/en/uploads/Tutorial/speaker_schem.png]

  * You can use a potentiometer to control the volume.

  * Using this library will affect usage of the PWM outputs, so be aware.

  * Also, although it's the last timer to be allocated, timer 0 (which is used for `millis()` among other things) will be affected if used.

You use it as such:
{{{
#include <Tone.h>

Tone tone1;

void setup()
{
  tone1.begin(13);
  tone1.play(NOTE_A4);
}

void loop()
{
}
}}}

The `play()` method can be called in one of two ways:

`tone1.play(`_*`frequency`*_`, `_*`duration`*_`);`

or

`tone1.play(`_*`frequency`*_`);`

The _*`frequency`*_ is in Hertz, and the _*`duration`*_ is in milliseconds.  If you do not specify _*`duration`*_, the tone will play continuously.

`Tone::play()` is non-blocking - this means that it starts the tone, then returns immediately.  Either the tone will stop playing after the duration specified, or will play indefinitely (if no duration provided).

Use the `stop()` method to stop the currently playing tone.

Use the `isPlaying()` method to see if the tone is playing.

Try out the RTTTL (!RingTone Text Transfer Language) example.

*WARNING*: Do not connect the pin directly to some sort of audio input.  The voltage is considerably higher than a standard line-out, and can damage sound card inputs, etc.  You could use a voltage divider to bring the voltage down, but you have been warned.

----

==Library Usage==

===Instantiation===

{{{

Tone notePlayer;

void setup(void)
{
  notePlayer.begin(13);
}

}}}


===Properties===
 * No properties.

===Methods===
 * `begin(`_*`pin`*_`)` - prepares a pin for playing a tone.
 * `isPlaying()` - returns `true` if tone is playing, `false` if not.
 * `play(`_*`frequency`*_` [, `_*`duration`*_`])` - play a tone.
   * _*`duration`*_ is optional.  If _*`duration`*_ is not given, tone will play continuously until _*`stop()`*_ is called.
   * `play()` is [http://en.wikipedia.org/wiki/Non-blocking_synchronization non-blocking].  Once called, `play()` will return immediately. If _*`duration`*_ is given, the tone will play for that amount of time, and then stop automatically.
 * `stop()` - stop playing a tone.

===Constants===

Below is a list of constant values of frequencies for notes.

e.g.

{{{
  notePlayer.play(NOTE_B3);
}}}

====Musical Notes====
|| *Constant Name* || *Frequency (Hz)* ||
<wiki:comment>
|| NOTE_B0  || 31 ||
|| NOTE_C1  || 33 ||
|| NOTE_CS1 || 35 ||
|| NOTE_D1  || 37 ||
|| NOTE_DS1 || 39 ||
|| NOTE_E1  || 41 ||
|| NOTE_F1  || 44 ||
|| NOTE_FS1 || 46 ||
|| NOTE_G1  || 49 ||
|| NOTE_GS1 || 52 ||
|| NOTE_A1  || 55 ||
|| NOTE_AS1 || 58 ||
|| NOTE_B1  || 62 ||
|| NOTE_C2  || 65 ||
|| NOTE_CS2 || 69 ||
|| NOTE_D2  || 73 ||
|| NOTE_DS2 || 78 ||
|| NOTE_E2  || 82 ||
|| NOTE_F2  || 87 ||
|| NOTE_FS2 || 93 ||
|| NOTE_G2  || 98 ||
|| NOTE_GS2 || 104 ||
|| NOTE_A2  || 110 ||
|| NOTE_AS2 || 117 ||
</wiki:comment>
|| NOTE_B2  || 123 ||
|| NOTE_C3  || 131 ||
|| NOTE_CS3 || 139 ||
|| NOTE_D3  || 147 ||
|| NOTE_DS3 || 156 ||
|| NOTE_E3  || 165 ||
|| NOTE_F3  || 175 ||
|| NOTE_FS3 || 185 ||
|| NOTE_G3  || 196 ||
|| NOTE_GS3 || 208 ||
|| NOTE_A3  || 220 ||
|| NOTE_AS3 || 233 ||
|| NOTE_B3  || 247 ||
|| NOTE_C4  || 262 ||
|| NOTE_CS4 || 277 ||
|| NOTE_D4  || 294 ||
|| NOTE_DS4 || 311 ||
|| NOTE_E4  || 330 ||
|| NOTE_F4  || 349 ||
|| NOTE_FS4 || 370 ||
|| NOTE_G4  || 392 ||
|| NOTE_GS4 || 415 ||
|| NOTE_A4  || 440 ||
|| NOTE_AS4 || 466 ||
|| NOTE_B4  || 494 ||
|| NOTE_C5  || 523 ||
|| NOTE_CS5 || 554 ||
|| NOTE_D5  || 587 ||
|| NOTE_DS5 || 622 ||
|| NOTE_E5  || 659 ||
|| NOTE_F5  || 698 ||
|| NOTE_FS5 || 740 ||
|| NOTE_G5  || 784 ||
|| NOTE_GS5 || 831 ||
|| NOTE_A5  || 880 ||
|| NOTE_AS5 || 932 ||
|| NOTE_B5  || 988 ||
|| NOTE_C6  || 1047 ||
|| NOTE_CS6 || 1109 ||
|| NOTE_D6  || 1175 ||
|| NOTE_DS6 || 1245 ||
|| NOTE_E6  || 1319 ||
|| NOTE_F6  || 1397 ||
|| NOTE_FS6 || 1480 ||
|| NOTE_G6  || 1568 ||
|| NOTE_GS6 || 1661 ||
|| NOTE_A6  || 1760 ||
|| NOTE_AS6 || 1865 ||
|| NOTE_B6  || 1976 ||
|| NOTE_C7  || 2093 ||
|| NOTE_CS7 || 2217 ||
|| NOTE_D7  || 2349 ||
|| NOTE_DS7 || 2489 ||
|| NOTE_E7  || 2637 ||
|| NOTE_F7  || 2794 ||
|| NOTE_FS7 || 2960 ||
|| NOTE_G7  || 3136 ||
|| NOTE_GS7 || 3322 ||
|| NOTE_A7  || 3520 ||
|| NOTE_AS7 || 3729 ||
|| NOTE_B7  || 3951 ||
|| NOTE_C8  || 4186 ||
|| NOTE_CS8 || 4435 ||
|| NOTE_D8  || 4699 ||
|| NOTE_DS8 || 4978 ||

----

==Links==

===RTTTL Sites===

  * http://merwin.bespin.org/db/rts/index.php
  * http://www.cellringtones.com/
  * http://nokiatone.ifrance.com/nokiatone/rtttf.htm
  * http://www.ringtones4all.com/index.php?page=freetone&catr=20&cnt=0
  * http://ringtones.frostzone.com/
  * http://www.2thumbswap.com/members/tones/nokia/tones_nokia_main.html
  * http://hem.passagen.se/klas2/vgtones/
  * http://arcadetones.emuunlim.com/

===Tone Library Examples===

  * [http://itp.nyu.edu/physcomp/Labs/ToneOutput Tom Igoe - Tone Output using an Arduino]

===Projects Using Tone Library and core tone===

  * [http://www.jeremycouillard.com/blog/03172010/ Interactive painting]

===Other===

  * [http://www.adrianfreed.com/content/arduino-sketch-high-frequency-precision-sine-wave-tone-sound-synthesis Arduino sketch for high frequency precision sine wave tone sound synthesis]